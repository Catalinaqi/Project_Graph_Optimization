openapi: 3.0.3
info:
  title: Graph Optimization API
  version: 1.0.0
  description: |
    API for managing graph optimization models using Dijkstra algorithm.
    Built with Node.js, Express, TypeScript, Sequelize, PostgreSQL.
    Authentication with JWT RS256.
    Token costs: model creation and execution = `0.20 * nodes + 0.01 * edges`.

servers:
  - url: http://localhost:3000
    description: Local development server

tags:
  - name: Auth
    description: Authentication endpoints
  - name: Users
    description: User profile and token management
  - name: Models
    description: Graph models creation and execution
  - name: WeightChange
    description: Request and moderation of weight changes
  - name: Versions
    description: Graph model version history
  - name: Simulation
    description: Simulation of weight variations

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

paths:
  /api/auth/register:
    post:
      tags: [Auth]
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email: { type: string, example: user02@test.com }
                password: { type: string, example: "12345678" }
      responses:
        "201":
          description: User registered
          content:
            application/json:
              example:
                message: User registered successfully
                id: 2
                email: user02@test.com
        "400":
          description: Invalid input
          content:
            application/json:
              example: { error: "Invalid email or password" }

  /api/auth/login:
    post:
      tags: [Auth]
      summary: Authenticate and obtain JWT
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email: { type: string, example: user02@test.com }
                password: { type: string, example: "12345678" }
      responses:
        "200":
          description: Authenticated
          content:
            application/json:
              example:
                token: eyJhbGciOi...
                expiresIn: 3600
        "401":
          description: Unauthorized
          content:
            application/json:
              example: { error: "Invalid credentials" }

  /api/users/me:
    get:
      tags: [Users]
      summary: Get authenticated user profile
      security: [{ bearerAuth: [] }]
      responses:
        "200":
          description: User profile
          content:
            application/json:
              example:
                id: 2
                email: user02@test.com
                role: user
                tokens: 100
        "401":
          description: Unauthorized
          content:
            application/json:
              example: { error: "Unauthorized" }

  /api/users/recharge:
    post:
      tags: [Users]
      summary: Recharge tokens for a user (admin only)
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, rechargeTokens, reason]
              properties:
                email: { type: string, example: user02@test.com }
                rechargeTokens: { type: number, example: 70 }
                reason: { type: string, example: admin recharge }
      responses:
        "201":
          description: Tokens recharged
          content:
            application/json:
              example:
                message: Tokens updated successfully
                user:
                  email: user02@test.com
                  previousTokens: 100
                  rechargeTokens: 70
                  totalRechargeTokens: 170
                  updatedAt: "2025-08-26T16:26:55Z"
        "403":
          description: Forbidden
          content:
            application/json:
              example: { error: "Forbidden" }

  /api/models:
    post:
      tags: [Models]
      summary: Create a new graph model
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name, graph]
              properties:
                name: { type: string, example: "Rete logistica Italia (Centro-Nord)" }
                graph:
                  type: object
                  example:
                    A: { B: 1.2, C: 2.5 }
                    B: { A: 1.2, D: 0.9, E: 1.6 }
      responses:
        "201":
          description: Model created
          content:
            application/json:
              example:
                success: true
                data:
                  modelId: 1
                  versionId: 1
                  createdAt: "2025-08-26T17:21:06.925Z"
                  costTokens: 2.78
                  remainingTokens: 167.22
                  nodes: 12
                  edges: 38
        "401":
          description: Unauthorized
        "402":
          description: Insufficient tokens
          content:
            application/json:
              example: { error: "Insufficient tokens", required: 2.78, available: 1.5 }
        "422":
          description: Validation failed
          content:
            application/json:
              example: { error: "Invalid graph structure" }

  /api/models/{id}:
    get:
      tags: [Models]
      summary: Get model with latest version
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      responses:
        "200":
          description: Model with latest version
          content:
            application/json:
              example:
                success: true
                data:
                  model:
                    id_model: 1
                    name_model: "Rete logistica Italia (Centro-Nord)"
                    current_version_model: 2
                    created_at_model: "2025-08-26T17:21:06.925Z"
                    updated_at_model: "2025-08-26T17:38:07.464Z"
                  latest:
                    id_version: 2
                    graph_version:
                      A: { B: 1.27, C: 2.5 }
                      B: { A: 1.2, D: 0.9, E: 1.6 }
                    node_count_version: 12
                    edge_count_version: 38
        "404":
          description: Not found
          content:
            application/json:
              example: { error: "Model not found" }

  /api/models/{id}/execute:
    post:
      tags: [Models]
      summary: Execute Dijkstra on a model
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [start, goal]
              properties:
                start: { type: string, example: "Bari" }
                goal: { type: string, example: "Salerno" }
      responses:
        "200":
          description: Execution result
          content:
            application/json:
              example:
                success: true
                data:
                  path: [Bari, Salerno]
                  cost: 2.2
                  execTimeMs: 1.21
                  chargeTokens: 3.37
                  version: 1
        "404":
          description: Model not found
        "422":
          description: No path found
          content:
            application/json:
              example: { error: "No path exists between A and Z" }

  /api/models/{id}/weight-change:
    post:
      tags: [WeightChange]
      summary: Request a weight change
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [from, to, weight]
              properties:
                from: { type: string, example: "A" }
                to: { type: string, example: "B" }
                weight: { type: number, example: 1.7 }
      responses:
        "201":
          description: Weight change created
          content:
            application/json:
              example:
                success: true
                data:
                  status: "pending"
                  id_weight_change_request: 2
                  id_model: 1
                  requester_user_id: 3
                  from_node: "A"
                  to_node: "B"
                  suggested_weight: "1.7000"
                  created_at: "2025-08-26T17:38:33.280Z"
        "409":
          description: Conflict (already pending)
          content:
            application/json:
              example: { error: "Pending request already exists for edge A-B" }

  /api/models/{id}/weight-change/{requestId}/approve:
    patch:
      tags: [WeightChange]
      summary: Approve a weight change request
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
        - in: path
          name: requestId
          required: true
          schema: { type: integer }
      responses:
        "200":
          description: Request approved
          content:
            application/json:
              example: { success: true, data: { ok: true } }

  /api/models/{id}/weight-change/{requestId}/reject:
    patch:
      tags: [WeightChange]
      summary: Reject a weight change request
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
        - in: path
          name: requestId
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                reason: { type: string, example: "Peso non coerente con la realtà" }
      responses:
        "200":
          description: Request rejected
          content:
            application/json:
              example: { success: true, data: { ok: true } }

  /api/models/{id}/versions:
    get:
      tags: [Versions]
      summary: List model versions
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
        - in: query
          name: nodeCount
          schema: { type: integer, example: 12 }
        - in: query
          name: edgeCount
          schema: { type: integer, example: 38 }
      responses:
        "200":
          description: Versions list
          content:
            application/json:
              example:
                success: true
                data:
                  - id_version: 2
                    version_number_version: 2
                    node_count_version: 12
                    edge_count_version: 38
                    alpha_used_version: "0.90"
                  - id_version: 1
                    version_number_version: 1
                    node_count_version: 12
                    edge_count_version: 38

  /api/models/{id}/simulate:
    post:
      tags: [Simulation]
      summary: Run a simulation by varying edge weight
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [from, to, start, stop, step, origin, goal]
              properties:
                from: { type: string, example: "A" }
                to: { type: string, example: "B" }
                start: { type: number, example: 1 }
                stop: { type: number, example: 2 }
                step: { type: number, example: 0.1 }
                origin: { type: string, example: "A" }
                goal: { type: string, example: "C" }
      responses:
        "200":
          description: Simulation executed
          content:
            application/json:
              example:
                success: true
                data:
                  simulationId: 14
                  results:
                    - weight: 1
                      path: [ "A", "C" ]
                      cost: 2.5
                      execTime: 0
                    - weight: 2
                      path: [ "A", "C" ]
                      cost: 2.5
                      execTime: 0
                  best:
                    weight: 1
                    path: [ "A", "C" ]
                    cost: 2.5
                    execTime: 0
        "400":
          description: Invalid range
          content:
            application/json:
              example: { error: "Invalid simulation range" }
        "404":
          description: Model or edge not found
          content:
            application/json:
              example: { error: "Model not found" }
