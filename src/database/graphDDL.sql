BEGIN;

-- =========================
-- Cleanup (drop in dependency order)
-- =========================
DROP TABLE IF EXISTS graph_simulation_result CASCADE;
DROP TABLE IF EXISTS graph_simulation CASCADE;
DROP TABLE IF EXISTS graph_weight_change_request CASCADE;
DROP TABLE IF EXISTS graph_version CASCADE;
DROP TABLE IF EXISTS graph_token_transaction CASCADE;
DROP TABLE IF EXISTS graph_model CASCADE;
DROP TABLE IF EXISTS graph_user CASCADE;

-- =========================
-- Extensions (optional)
-- =========================
CREATE EXTENSION IF NOT EXISTS "pgcrypto";

-- =========================
-- ENUMS (preserved)
-- =========================
DO $$
BEGIN
    IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'graph_role_user') THEN
        CREATE TYPE graph_role_user AS ENUM ('user', 'admin');
    END IF;
    IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'graph_request_status') THEN
        CREATE TYPE graph_request_status AS ENUM ('pending','approved','rejected');
    END IF;
END$$;

-- =========================
-- 1) graph_user
-- =========================
CREATE TABLE graph_user (
    id_user              INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    email_user           VARCHAR(255) NOT NULL UNIQUE,
    password_user        VARCHAR(255) NOT NULL,
    role_user            graph_role_user NOT NULL DEFAULT 'user',
    tokens_user          NUMERIC(12,2) NOT NULL DEFAULT 0,
    created_at_user      TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at_user      TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

CREATE INDEX idx_graph_user_role_user ON graph_user (role_user);

-- =========================
-- 2) graph_token_transaction
-- =========================
CREATE TABLE graph_token_transaction (
    id_token_transaction             INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    id_user                          INT NOT NULL,
    id_performer_user                INT NULL,
    prev_tokens_token_transaction    NUMERIC(12,2) NOT NULL,
    new_tokens_token_transaction     NUMERIC(12,2) NOT NULL,
    diff_tokens_token_transaction    NUMERIC(12,2) NOT NULL,
    reason_token_transaction         TEXT NULL,
    created_at_token_transaction     TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    CONSTRAINT fk_gtt_user
        FOREIGN KEY (id_user) REFERENCES graph_user(id_user) ON DELETE CASCADE,
    CONSTRAINT fk_gtt_performer_user
        FOREIGN KEY (id_performer_user) REFERENCES graph_user(id_user) ON DELETE SET NULL
);

CREATE INDEX idx_gtt_user_created_at
    ON graph_token_transaction (id_user, created_at_token_transaction DESC);

-- =========================
-- 3) graph_model
-- =========================
CREATE TABLE graph_model (
    id_model                 INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    id_owner_user            INT NOT NULL,
    name_model               VARCHAR(255) NOT NULL,
    description_model        TEXT NULL,
    current_version_model    INT NOT NULL DEFAULT 1,
    created_at_model         TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at_model         TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    CONSTRAINT fk_gm_owner
        FOREIGN KEY (id_owner_user) REFERENCES graph_user(id_user) ON DELETE CASCADE
);

CREATE UNIQUE INDEX uq_gm_owner_name
    ON graph_model (id_owner_user, name_model);

CREATE INDEX idx_gm_owner ON graph_model (id_owner_user);

-- =========================
-- 4) graph_version
-- =========================
CREATE TABLE graph_version (
    id_version                 INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    id_model                   INT NOT NULL,
    version_number_version     INT NOT NULL,
    graph_version              JSONB NOT NULL,
    node_count_version         INT NOT NULL,
    edge_count_version         INT NOT NULL,
    alpha_used_version         NUMERIC(3,2) NULL,
    id_creator_user            INT NOT NULL,
    created_at_version         TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    CONSTRAINT fk_gv_model
        FOREIGN KEY (id_model) REFERENCES graph_model(id_model) ON DELETE CASCADE,
    CONSTRAINT fk_gv_creator
        FOREIGN KEY (id_creator_user) REFERENCES graph_user(id_user) ON DELETE RESTRICT
);

CREATE UNIQUE INDEX uq_gv_model_version
    ON graph_version (id_model, version_number_version);

CREATE INDEX idx_gv_model_created_at
    ON graph_version (id_model, created_at_version DESC);

CREATE INDEX idx_gv_counts
    ON graph_version (node_count_version, edge_count_version);

-- =========================
-- 5) graph_weight_change_request
-- =========================
CREATE TABLE graph_weight_change_request (
    id_weight_change_request              INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    id_model                              INT NOT NULL,
    id_requester_user                     INT NOT NULL,
    from_node_weight_change_request       VARCHAR(255) NOT NULL,
    to_node_weight_change_request         VARCHAR(255) NOT NULL,
    requested_weight_weight_change_request NUMERIC(12,4) NOT NULL,
    status_weight_change_request          graph_request_status NOT NULL DEFAULT 'pending',
    reason_weight_change_request          TEXT NULL,
    id_reviewer_user                      INT NULL,
    prev_weight_weight_change_request     NUMERIC(12,4) NULL,
    applied_weight_weight_change_request  NUMERIC(12,4) NULL,
    alpha_used_weight_change_request      NUMERIC(3,2) NULL,
    created_at_weight_change_request      TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    updated_at_weight_change_request      TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    CONSTRAINT fk_wcr_model
        FOREIGN KEY (id_model) REFERENCES graph_model(id_model) ON DELETE CASCADE,
    CONSTRAINT fk_wcr_requester
        FOREIGN KEY (id_requester_user) REFERENCES graph_user(id_user) ON DELETE RESTRICT,
    CONSTRAINT fk_wcr_reviewer
        FOREIGN KEY (id_reviewer_user) REFERENCES graph_user(id_user) ON DELETE SET NULL
);

CREATE INDEX idx_wcr_model_status_date
    ON graph_weight_change_request (id_model, status_weight_change_request, created_at_weight_change_request DESC);

CREATE INDEX idx_wcr_requester
    ON graph_weight_change_request (id_requester_user);

-- =========================
-- 6) graph_simulation
-- =========================
CREATE TABLE graph_simulation (
    id_simulation              INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    id_model                   INT NOT NULL,
    version_number_simulation  INT NOT NULL,
    id_user                    INT NOT NULL,
    from_node_simulation       VARCHAR(255) NOT NULL,
    to_node_simulation         VARCHAR(255) NOT NULL,
    start_weight_simulation    NUMERIC(12,4) NOT NULL,
    end_weight_simulation      NUMERIC(12,4) NOT NULL,
    step_weight_simulation     NUMERIC(12,4) NOT NULL,
    created_at_simulation      TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    CONSTRAINT fk_gs_model
        FOREIGN KEY (id_model) REFERENCES graph_model(id_model) ON DELETE CASCADE,
    CONSTRAINT fk_gs_user
        FOREIGN KEY (id_user) REFERENCES graph_user(id_user) ON DELETE RESTRICT
);

CREATE INDEX idx_gs_model_created_at
    ON graph_simulation (id_model, created_at_simulation DESC);

-- =========================
-- 7) graph_simulation_result
-- =========================
CREATE TABLE graph_simulation_result (
    id_simulation_result                INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    id_simulation                       INT NOT NULL,
    tested_weight_simulation_result     NUMERIC(12,4) NOT NULL,
    path_simulation_result              JSONB NOT NULL,
    path_cost_simulation_result         NUMERIC(12,4) NOT NULL,
    execution_time_ms_simulation_result NUMERIC(12,4) NOT NULL,
    created_at_simulation_result        TIMESTAMPTZ NOT NULL DEFAULT NOW(),
    CONSTRAINT fk_gsr_simulation
        FOREIGN KEY (id_simulation) REFERENCES graph_simulation(id_simulation) ON DELETE CASCADE
);

CREATE INDEX idx_gsr_simulation
    ON graph_simulation_result (id_simulation);

CREATE INDEX idx_gsr_best_cost
    ON graph_simulation_result (path_cost_simulation_result);

COMMIT;
