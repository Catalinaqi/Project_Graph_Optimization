import { GraphRoleUserEnum } from "@/common/enums";
import Joi from "joi";

import type { Transaction } from "sequelize";

export type Tx = { transaction?: Transaction };

/**
 * Interface: UserPayloadTypeSafe
 *
 * Description:
 * Defines the structure of the payload contained inside a JWT token.
 * Ensures type-safety for `req.user` once the token has been verified.
 *
 * Purpose:
 * - Provide a strongly typed contract for JWT payloads.
 * - Avoid mistakes when accessing user-related fields across the application.
 *
 * Fields (JWT payload):
 * - `id` (string): Unique identifier of the user (UUID or similar).
 * - `email` (string): Email of the authenticated user.
 * - `role` (GraphRoleUserEnum): Role of the user (e.g., ADMIN, USER).
 * - `token?` (number, optional): Remaining user tokens (may not always be present in the JWT).
 * - `iat?` (number, optional): "Issued At" timestamp (auto-generated by JWT).
 * - `exp?` (number, optional): "Expiration" timestamp (auto-generated by JWT).
 */
interface UserPayloadTypeSafe {
  id: number;
  email: string;
  role: GraphRoleUserEnum;
  token?: number;
  iat?: number;
  exp?: number;
}

//**Result of setting a new balance for a user */
interface SetNewBalanceResult {
  previousTokens: number;
  rechargeTokens: number;
  totalRechargeTokens: number;
  updatedAt: string;
}

//**Input for creating a new model and for executing*/
interface CreateModelInput {
  ownerUserId: number;
  name: string;
  description: string | null;
  graph: Record<string, Record<string, number>>;
}
interface ExecuteInput {
  modelId: number;
  start: string;
  goal: string;
  userId: number;
}

interface SimulationInput {
  id_model: number;
  version_number_simulation: number;
  id_user: number;
  from_node_simulation: string;
  to_node_simulation: string;
  start_weight_simulation: number;
  end_weight_simulation: number;
  step_weight_simulation: number;
  created_at_simulation: Date;
}

interface SimulationResultInput {
  id_simulation: number;
  tested_weight_simulation_result: number;
  path_simulation_result: string;
  path_cost_simulation_result: number;
  execution_time_ms_simulation_result: number;
  created_at_simulation_result: Date;
}

interface ValidationError {
  field: string;
  message: string;
  value?: Joi.ValidationErrorItem;
  type: string;
}

/**
 * Interface: Enviroment
 *
 * Description:
 * Maps all configuration variables loaded from `.env`.
 * Provides compile-time type safety for the central environment configuration object.
 *
 * Purpose:
 * - Ensure all environment variables are typed and safely accessed.
 * - Centralize runtime configuration in one strongly typed interface.
 *
 * Fields:
 *
 * General:
 * - `nodeEnv` (string): Current runtime environment (development, test, production).
 * - `apiPort` (number): Port where the Express API runs.
 *
 * Database:
 * - `postgresPort` (number): Port of the PostgreSQL database.
 * - `postgresHost` (string): Host of the PostgreSQL database (e.g., service name in Docker).
 * - `postgresUser` (string): Database username.
 * - `postgresPassword` (string): Database password.
 * - `postgresDB` (string): Database name.
 *
 * JWT:
 * - `jwtPrivateKeyPath` (string): File system path to the private JWT key.
 * - `jwtPublicKeyPath` (string): File system path to the public JWT key.
 * - `jwtExpiresIn` (number): Token expiration time (in seconds).
 * - `jwtAlgorithm` (string): Algorithm used to sign/verify JWT (e.g., RS256).
 * - `jwtIssuer?` (string, optional): Issuer claim for JWT tokens.
 * - `jwtAudience?` (string, optional): Audience claim for JWT tokens.
 *
 * Security:
 * - `saltRounds` (number): Number of rounds used for bcrypt password hashing.
 * - `initUserTokens` (number): Number of initial tokens assigned to a new user.
 *
 * Admin:
 * - `adminEmail?` (string, optional): Preconfigured admin email (for seeding admin user).
 * - `passwordAdmin?` (string, optional): Preconfigured admin password (for seeding admin user).
 * - `adminTokens?` (number, optional): Initial tokens assigned to admin (for seeding admin user).
 */
interface Enviroment {
  nodeEnv: string;
  apiPort: number;
  appTz: string;

  // Database
  postgresPort: number;
  postgresHost: string;
  postgresUser: string;
  postgresPassword: string;
  postgresDB: string;

  // JWT
  jwtPrivateKeyPath: string;
  jwtPublicKeyPath: string;
  jwtExpiresIn: number;
  jwtAlgorithm: string;
  jwtIssuer?: string;
  jwtAudience?: string;

  // Security
  saltRounds: number;
  initUserTokens: number;

  // Admin
  adminEmail?: string;
  passwordAdmin?: string;
  adminTokens?: number;

  // Graph
  graphAlphaKey: number;
}

export {
  Enviroment,
  UserPayloadTypeSafe,
  SetNewBalanceResult,
  ValidationError,
  CreateModelInput,
  ExecuteInput,
  SimulationInput,
  SimulationResultInput,
};
